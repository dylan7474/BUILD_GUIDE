#!/bin/bash

# This script installs the NVIDIA CUDA Toolkit, Ollama, and Open WebUI.
# It is designed to run in two stages to handle reboots required for permissions.
#
# STAGE 1 (this script): Installs all software.
# STAGE 2 (run by you after reboot): Starts the Open WebUI container.

set -e

# --- Configuration ---
CUDA_VERSION="12-5"


# --- Colors for Readability ---
GREEN="\e[32m"
CYAN="\e[36m"
YELLOW="\e[33m"
RESET="\e[0m"

# --- Helper Functions ---
print_section() {
    echo -e "${CYAN}\n==================================================================${RESET}"
    echo -e "${CYAN}# $1${RESET}"
    echo -e "${CYAN}==================================================================${RESET}"
}

print_done() {
    echo -e "${GREEN}✔ Done.${RESET}"
}


# --- PART 1 FUNCTIONS ---

install_cuda() {
    print_section "Installing NVIDIA CUDA Toolkit v${CUDA_VERSION}"
    if ! command -v nvidia-smi &> /dev/null; then
        echo -e "${YELLOW}WARNING: No NVIDIA driver detected. The script will install the CUDA toolkit, which includes a driver.${RESET}"
        read -p "Press [Enter] to continue, or [Ctrl+C] to exit."
    else
        echo "NVIDIA driver detected."
    fi

    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
    sudo dpkg -i cuda-keyring_1.1-1_all.deb
    sudo apt-get update
    echo "Installing CUDA toolkit. This may take a significant amount of time..."
    sudo apt-get -y install cuda-toolkit-${CUDA_VERSION}

    echo 'export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}' | sudo tee /etc/profile.d/cuda.sh
    echo 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}' | sudo tee -a /etc/profile.d/cuda.sh
    rm cuda-keyring_1.1-1_all.deb
    print_done
}

install_ollama() {
    print_section "Installing Ollama"
    curl -fsSL https://ollama.com/install.sh | sh
    print_done
}

install_docker() {
    print_section "Installing Docker"
    if ! command -v docker &> /dev/null; then
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

        echo "Adding current user ($USER) to the 'docker' group..."
        sudo usermod -aG docker $USER
    else
        echo "Docker is already installed."
    fi
    print_done
}


# --- PART 2 FUNCTION ---

run_open_webui() {
    print_section "Starting Open WebUI Container"
    echo "Pulling the Open WebUI Docker image and starting the container..."
    
    # Check if the container already exists
    if [ "$(docker ps -a -q -f name=open-webui)" ]; then
        echo "An existing 'open-webui' container was found. Removing it before starting a new one."
        docker rm -f open-webui
    fi
    
    docker run -d -p 3000:8080 --gpus=all -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main
    echo "Waiting a few seconds for the container to initialize..."
    sleep 5
    
    # Verify it's running
    if [ "$(docker ps -q -f name=open-webui)" ]; then
        echo -e "${GREEN}✔ Open WebUI container is running successfully!${RESET}"
        echo "You can now access it at: ${CYAN}http://localhost:3000${RESET}"
    else
        echo -e "${YELLOW}Error: The Open WebUI container failed to start. Check logs with 'docker logs open-webui'${RESET}"
    fi
}


# --- MAIN EXECUTION LOGIC ---

# This script uses an argument to decide which part to run.
# If run with "post-reboot", it runs the second part.
# Otherwise, it runs the first part and gives instructions.

if [ "$1" == "post-reboot" ]; then
    # --- STAGE 2: Run after rebooting ---
    run_open_webui
else
    # --- STAGE 1: Initial Installation ---
    install_cuda
    install_ollama
    install_docker

    print_section "ACTION REQUIRED: Please Follow These Steps"
    echo -e "${YELLOW}The initial installation is complete. A reboot is required for two reasons:${RESET}"
    echo "1. To finalize the CUDA Toolkit installation and apply its system path."
    echo "2. To apply your user's new membership to the 'docker' group."
    echo ""
    echo -e "${CYAN}------------------------- YOUR NEXT STEPS -------------------------${RESET}"
    echo -e "1. ${GREEN}Reboot your computer now.${RESET}"
    echo ""
    echo -e "2. After you log back in, open a new terminal and run this exact command"
    echo -e "   to start the Open WebUI service:"
    echo ""
    echo -e "   ${GREEN}./install-ai-tools.sh post-reboot${RESET}"
    echo -e "${CYAN}-------------------------------------------------------------------${RESET}"
    echo ""
fi

