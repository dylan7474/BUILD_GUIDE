#!/bin/bash

# This script installs the NVIDIA CUDA Toolkit, Ollama, and Open WebUI.
# It should be run on a fresh Ubuntu 22.04 installation after running
# your initial development environment setup script.

set -e

# --- Configuration ---
# You can change this to a different version if needed.
# Check the NVIDIA website for the latest compatible version for your hardware.
CUDA_VERSION="12-5"


# --- Colors for Readability ---
GREEN="\e[32m"
CYAN="\e[36m"
YELLOW="\e[33m"
RESET="\e[0m"

# --- Helper Functions ---
print_section() {
    echo -e "${CYAN}\n==================================================================${RESET}"
    echo -e "${CYAN}# $1${RESET}"
    echo -e "${CYAN}==================================================================${RESET}"
}

print_done() {
    echo -e "${GREEN}âœ” Done.${RESET}"
}

# --- 1. NVIDIA CUDA Toolkit Installation ---
install_cuda() {
    print_section "Installing NVIDIA CUDA Toolkit v${CUDA_VERSION}"

    # Check for an existing NVIDIA driver
    if ! command -v nvidia-smi &> /dev/null; then
        echo -e "${YELLOW}WARNING: No NVIDIA driver detected. The script will install the CUDA toolkit, which includes a driver.${RESET}"
        echo -e "${YELLOW}It is highly recommended to install the proprietary NVIDIA drivers from 'Additional Drivers' first.${RESET}"
        read -p "Press [Enter] to continue, or [Ctrl+C] to exit."
    else
        echo "NVIDIA driver detected."
        nvidia-smi
    fi

    # Add NVIDIA's repository
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
    sudo dpkg -i cuda-keyring_1.1-1_all.deb
    sudo apt-get update

    # Install CUDA toolkit
    # The 'cuda-toolkit-12-5' package contains the compiler and development libraries.
    # The 'cuda-drivers' package ensures a compatible driver is installed.
    echo "Installing CUDA toolkit. This may take a significant amount of time..."
    sudo apt-get -y install cuda-toolkit-${CUDA_VERSION}

    # Add CUDA to the system path for all users
    echo 'export PATH=/usr/local/cuda/bin${PATH:+:${PATH}}' | sudo tee /etc/profile.d/cuda.sh
    echo 'export LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}' | sudo tee -a /etc/profile.d/cuda.sh

    # Clean up
    rm cuda-keyring_1.1-1_all.deb

    echo -e "${YELLOW}CUDA has been installed. Please reboot your system for the changes to take full effect.${RESET}"
    print_done
}


# --- 2. Ollama Installation ---
install_ollama() {
    print_section "Installing Ollama"

    # Download and run the official Ollama installer script
    curl -fsSL https://ollama.com/install.sh | sh

    echo "Ollama service has been installed and started."
    echo "You can interact with it using 'ollama run <model_name>'."
    print_done
}


# --- 3. Docker and Open WebUI Installation ---
install_open_webui() {
    print_section "Installing Open WebUI (with Docker)"

    # --- Docker Installation ---
    if ! command -v docker &> /dev/null; then
        echo "Docker not found. Installing Docker..."
        sudo apt-get update
        sudo apt-get install -y ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
          $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
          sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
        sudo apt-get update
        sudo apt-get -y install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

        # Add current user to the docker group to avoid using sudo
        sudo usermod -aG docker $USER
        echo -e "${YELLOW}You have been added to the 'docker' group. You will need to log out and log back in for this to take effect.${RESET}"
    else
        echo "Docker is already installed."
    fi

    # --- Open WebUI Installation ---
    echo "Pulling the Open WebUI Docker image and starting the container..."
    # We use --gpus=all to ensure the container can access the NVIDIA GPU
    # This is necessary for hardware acceleration with Ollama
    docker run -d -p 3000:8080 --gpus=all -v open-webui:/app/backend/data --name open-webui --restart always ghcr.io/open-webui/open-webui:main

    print_done
}

# --- Main Execution ---
main() {
    install_cuda
    install_ollama
    install_open_webui

    print_section "Installation Complete!"
    echo -e "${GREEN}Summary:${RESET}"
    echo "- NVIDIA CUDA Toolkit has been installed."
    echo "- Ollama service is running."
    echo "- Open WebUI is running in a Docker container."
    echo ""
    echo -e "${YELLOW}IMPORTANT NEXT STEPS:${RESET}"
    echo "1. ${YELLOW}Reboot your computer${RESET} to apply CUDA path changes and new group memberships."
    echo "2. After rebooting, open a web browser and navigate to ${CYAN}http://localhost:3000${RESET} to access Open WebUI."
    echo "3. The first account created on Open WebUI will be the administrator account."
    echo "4. Inside Open WebUI, you will be able to connect to the local Ollama instance and download models."
}

main
